import { BoardValue, DrawResult, GameFigure, GameResult, Board } from '@types/types';
import { BOT_FIGURE, EMPTY_CELL_VALUE } from './game-const';

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã –≤—Å–µ—Ö –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫ –Ω–∞ –¥–æ—Å–∫–µ.
 *
 * @param {BoardValue[]} board –¢–µ–∫—É—â–∞—è –∏–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞.
 * @returns {number[]} –ú–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫.
 */
export const getIndexesOfEmptyCells = (board: Board): number[] =>
  board.map((val, i) => (val === EMPTY_CELL_VALUE ? i : EMPTY_CELL_VALUE
  )).filter((i): i is number => i !== EMPTY_CELL_VALUE);

export const getCountOfNonEmptyCells = (board: Board): number =>
  board.reduce<number>((total, current) => current === EMPTY_CELL_VALUE ? total : total + 1, 0)

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ö–æ–¥ –±–æ—Ç–∞, –≤—ã–±–∏—Ä–∞—è —Å–ª—É—á–∞–π–Ω—É—é –ø—É—Å—Ç—É—é —è—á–µ–π–∫—É.
 *
 * @param {BoardValue[]} board –¢–µ–∫—É—â–∞—è –∏–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞.
 * @returns {BoardValue[]} –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å–∫–∏ –ø–æ—Å–ª–µ —Ö–æ–¥–∞ –±–æ—Ç–∞.
 */
export const botMove = (board: BoardValue[]): BoardValue[] => {
  const empty = getIndexesOfEmptyCells(board);
  if (empty.length === 0) return board;
  const index = empty[Math.floor(Math.random() * empty.length)];
  const newBoard = [...board];
  newBoard[index] = BOT_FIGURE;
  return newBoard;
};

export const getResultGameMessage = (winner: GameResult, playerFigure: GameFigure): string => {
  if (winner === DrawResult.DRAW_RESULT) {
    return '–ù–∏—á—å—è!';
  } else if (winner === playerFigure) {
    return '–¢—ã –ø–æ–±–µ–¥–∏–ª! üéâ';
  } else {
    return '–ë–æ—Ç –ø–æ–±–µ–¥–∏–ª ü§ñ';
  }
};

const isGameFigure = (figure: unknown): figure is GameFigure => {
  return (figure === GameFigure.X || figure === GameFigure.O
  );
};

export const isGameOver = (board: BoardValue[]): GameResult | null => {
  const lines = [
    [0, 1, 2], [3, 4, 5], [6, 7, 8],
    [0, 3, 6], [1, 4, 7], [2, 5, 8],
    [0, 4, 8], [2, 4, 6],
  ];

  for (const [a, b, c] of lines) {
    const firstElem = board[a];
    if (firstElem === board[b] && firstElem === board[c] && isGameFigure(firstElem)) {
      return firstElem; // –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
    }
  }
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∏—á—å—é
  const isDraw = board.every(cell => cell !== EMPTY_CELL_VALUE);
  return isDraw ? DrawResult.DRAW_RESULT : null; // null ‚Äî –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è

}